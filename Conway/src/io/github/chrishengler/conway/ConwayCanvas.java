/*
 * Copyright (c) 2016, Chris Hengler
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package io.github.chrishengler.conway;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Color;
        
/**
 *
 * @author Chris Hengler
 */
public class ConwayCanvas extends javax.swing.JPanel{

  private float m_cellwidth, m_cellheight;
  private Game m_game;
  
  /**
   * Creates new form ConwayCanvas
   * 
   * @param g the Game we'll be drawing
   */
  public ConwayCanvas(Game g){
    setVisible(true);
    m_game = g;
    initComponents();
    calcCellSize();
  }
  
  @Override
  public Dimension getPreferredSize(){
    return new Dimension(600,600);
  }
  
  private void calcCellSize(){
    m_cellwidth = (float)this.getWidth()/m_game.getX();
    m_cellheight = (float)this.getHeight()/m_game.getY();
  }
  
  @Override
  public void paintComponent(Graphics g){
	calcCellSize();
    super.paintComponent(g);
    
    g.setColor(Color.black);
    for(int ii=0;ii<=m_game.getX();++ii){
      g.drawLine((int)(ii*m_cellwidth),0,(int)(ii*m_cellwidth),(int)(m_game.getY()*m_cellheight));
      if(ii==m_game.getX()) continue;
    	for(int jj=0;jj<=m_game.getY();++jj){
        if(ii==0){
    		  g.drawLine(0, (int)(jj*m_cellheight), (int)(m_game.getX()*m_cellwidth), (int)(jj*m_cellheight));
    	  }
        if(jj==m_game.getY()) continue;
        if(m_game.isAlive(ii,jj)){
        	g.fillRect((int)(ii*m_cellwidth),(int)(jj*m_cellheight),(int)m_cellwidth,(int)m_cellheight);
        }
      }
    }
    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setPreferredSize(new java.awt.Dimension(600, 600));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 600, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 350, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
